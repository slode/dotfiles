#!/usr/bin/env python3

"""
Starts vim with several possible input formats.
Examples:
  v foo/bar/baz.c # full correct path
  v baz.c # finds baz.c and edits the first
  v baz.c:123 # same but start at line 123
  v baz.c +123 # same as above
"""

import os
import sys
import re
import argparse
import tempfile
import pathlib
import dataclasses


@dataclasses.dataclass
class FileDescription:
    filename: pathlib.Path
    line_number: int = dataclasses.field(default=0)


regex_matchers = [
    re.compile(
        """
            (?P<file>(\.\/|\/|~\/|\w+/)[\w~\.\/]+[^:[,\(\s\n]+)+([^\d])*
            (?P<lno>\d+)?
        """,
        re.VERBOSE,
    ),
    re.compile('File "(?P<file>[^"]+)", line (?P<lno>\d+)?'),
]


def search_for_file(path: pathlib.Path) -> pathlib.Path | None:
    """Searches for a file matching the input filename."""

    for f in pathlib.Path(".").rglob(path.name):
        return f


def match_with_pattern(pattern: str) -> FileDescription:
    """Match pattern against regular expressions verify that the file exists."""
    for rex in regex_matchers:
        match = rex.search(pattern)
        if match is None:
            continue

        filename = pathlib.Path(match.group("file"))
        line_number = match.group("lno") or 0

        if not filename.exists():
            filename = search_for_file(filename)
            if not filename:
                continue

        return FileDescription(
            filename=filename,
            line_number=line_number,
        )

    raise OSError(f"File matching '{pattern}' not found!")


def read_from_stdin() -> FileDescription:
    """Dump stdin input to a named temp file and return file description."""

    with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False) as tf:
        for line in sys.stdin:
            tf.write(line)

    return FileDescription(filename=pathlib.Path(tf.name))


def main():
    parser = argparse.ArgumentParser("Vim quick open")
    parser.add_argument(
        "pattern",
        help="""
                file-like path, optionally with line number.
                If no argument is provided, 'v' reads from stdin.
            """,
        nargs="*",
        default="",
    )

    args = parser.parse_args()
    pattern = " ".join(args.pattern).strip()
    try:
        if pattern == "":
            fd = read_from_stdin()
        else:
            fd = match_with_pattern(pattern)
    except OSError as e:
        sys.exit(str(e))

    editor = os.environ.get("EDITOR", "nvim")
    os.system(f"{editor} {fd.filename} +{fd.line_number}")


if __name__ == "__main__":
    main()
