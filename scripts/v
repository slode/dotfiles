#!/usr/bin/env python3

"""
Starts vim with several possible input formats.
Examples:
  v foo/bar/baz.c # full correct path
  v baz.c # finds baz.c and edits the first
  v baz.c:123 # same but start at line 123
  v baz.c +123 # same as above
"""

import os
import sys
import re
import argparse
import tempfile


regex_matchers = [
        re.compile('(?P<file>(\.\/|\/|~\/|\w+/)[\w~\.\/]+[^:[\(\s\n]+)+([^\d])*(?P<lno>\d+)?'),
        re.compile('File "(?P<file>[^"]+)", line (?P<lno>\d+)?')
        ]

def find_first(name, path):
    """Find first file on path."""
    for root, dirs, files in os.walk(path):
        if name in files:
            return os.path.join(root, name)

def read_stdin():
    """Write to tmp-file from stdin and return filename"""
    fd, fname = tempfile.mkstemp()
    with os.fdopen(fd, "w") as f:
        for line in sys.stdin:
            f.write(line)
    return fname

if __name__ == "__main__":
    parser = argparse.ArgumentParser("Vim file search")
    parser.add_argument(
            "-s", "--stdin",
            help="Read from stdin",
            action="store_true",
            default=False)
    parser.add_argument(
            "pattern",
            help="file-like path, optionally with line number\n"
            "-- to read from stdin",
            nargs="*",
            default=None)

    args = parser.parse_args()

    spec = {}
    if args.stdin:
        spec["file"] = read_stdin()

    elif args.pattern is not None:
        spec["file"] = " ".join(args.pattern)
        for rex in regex_matchers:
            match = rex.search(" ".join(args.pattern))
            if match is None:
                continue

            spec.update({k: v for k, v in match.groupdict().items() if v is not None})

        if not os.path.exists(spec["file"]):
            spec["file"] = find_first(spec["file"], ".") or spec["file"]

    cmd = "vim"

    if "file" in spec:
        cmd += " +" + str(spec.get("lno", "0"))
        cmd += " " + spec.get("file", "")

    os.system(cmd)
